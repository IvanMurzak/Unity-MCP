name: Test Discord Webhook

on:
  workflow_dispatch:
    inputs:
      test_message:
        description: 'Custom test message (optional)'
        required: false
        default: ''
        type: string

jobs:
  test-discord-webhook:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Generate test release notes
        id: test_notes
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get the latest tag for testing
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          repo_url="https://github.com/${GITHUB_REPOSITORY}"
          today=$(date +'%B %e, %Y')

          # Use custom message if provided, otherwise generate sample notes
          if [ -n "${{ github.event.inputs.test_message }}" ]; then
            echo "# Custom Test Message" > test_release.md
            echo "${{ github.event.inputs.test_message }}" >> test_release.md
          else
            echo "# üß™ TEST: AI Game Developer (Unity-MCP) v999.99.99" > test_release.md
            echo "**Released:** *$today*" >> test_release.md
            echo "" >> test_release.md
            echo "---" >> test_release.md
            echo "" >> test_release.md
            echo "## This is a test message" >> test_release.md
            echo "This message is being sent to test the Discord webhook integration." >> test_release.md
            echo "" >> test_release.md
            echo "## Sample Commit Summary" >> test_release.md

            # Get last 5 commits as sample
            for sha in $(git log --pretty=format:'%H' -n 5); do
              username=$(gh api repos/${GITHUB_REPOSITORY}/commits/$sha --jq '.author.login // .commit.author.name' 2>/dev/null || echo "unknown")
              message=$(git log -1 --pretty=format:'%s' $sha)
              short_sha=$(git log -1 --pretty=format:'%h' $sha)
              echo "- [\`$short_sha\`]($repo_url/commit/$sha) ‚Äî $message by @$username" >> test_release.md
            done
          fi

          # Output the test notes
          printf "release_body<<ENDOFRELEASEBODY\n%s\nENDOFRELEASEBODY\n" "$(cat test_release.md)" >> $GITHUB_OUTPUT
          echo "version=TEST-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: Send test message to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          # Get the test notes
          release_notes='${{ steps.test_notes.outputs.release_body }}'
          version='${{ steps.test_notes.outputs.version }}'

          # Create the release URL (points to releases page for test)
          release_url="https://github.com/${{ github.repository }}/releases"

          # Append test notice and link
          full_message="${release_notes}

          ---
          ‚ö†Ô∏è **This is a test message** - [View Actual Releases](${release_url})"

          # Discord has a 2000 character limit
          if [ ${#full_message} -gt 1900 ]; then
            max_notes_length=$((1900 - 100))
            truncated_notes="${release_notes:0:${max_notes_length}}..."
            full_message="${truncated_notes}

          ‚ö†Ô∏è **This is a test message** - [View Actual Releases](${release_url})"
          fi

          # Create JSON payload for Discord webhook
          json_payload=$(jq -n \
            --arg content "$full_message" \
            '{content: $content}')

          # Send to Discord webhook
          response=$(curl -s -w "\n%{http_code}" -X POST "$DISCORD_WEBHOOK" \
            -H "Content-Type: application/json" \
            -d "$json_payload")

          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')

          if [ "$http_code" -eq 204 ]; then
            echo "‚úÖ Test message successfully sent to Discord!"
          else
            echo "‚ùå Failed to send test message. HTTP Status: $http_code"
            echo "Response: $body"
            exit 1
          fi